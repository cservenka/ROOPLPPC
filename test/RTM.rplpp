class Cell
    Cell right
    cell left
    int data
    int index
    cell self

    method getLeft(Cell cell)
        right <=> cell

    method getRight(Cell cell)
        left <=> cell
    
    method getSelf(Cell cell)
        self <=> cell

    method lookup(int pos, int symbol)
        if pos = index then
            symbol <=> data
        else
            if pos < index then
                call left::lookup(pos, symbol)
            else
                call right::lookup(pos, symbol)
            fi pos < index
        fi pos = index

class RTM
    Cell tapeHead
    int[] q1
    int[] q2
    int[] s1
    int[] s2
    int SLASH


    method main()
        new int[30] q1
        new int[30] q2
        new int[30] s1
        new int[30] s2


    method simulate(Cell tapeHead, int pos, int state, int[] q1, int[] s1, int[] s2, int[] q2, int pc) 
        from state = Qs do
            pc += 1                                 // Increment pc local int symbol = 0
            call tapeHead::lookup(pos, symbol)      //Fetch current symbol 
            call inst(state, symbol, q1, s1, s2, q2, pc, tapeHead)
            uncall tapeHead::lookup(pos, symbol)    //Zero-clear symbol delocal symbol = 0

            if pc = PC_MAX then                     // Reset pc 
                pc ^= PC_MAX
            else skip
            fi pc = 0 
        loop skip
        until state = Qf
 
    method inst(int state, int symbol, int[] q1, int[] s1, int[] s2, int[] q2, int pc, Cell tapeHead)
        if state = q1[pc] && symbol = s1[pc] then   // Symbol rule:
            state += q2[pc]-q1[pc]                  // set state to q2[pc]
            symbol += s2[pc]-s1[pc]                 // set symbol to s2[pc]
        fi state = q2[pc] && symbol = s2[pc] 
        if state = q1[pc] && s1[pc] = SLASH then    // Move rule:
            state += q2[pc]-q1[pc]                  // set state to q2[pc] 
            if s2[pc] = RIGHT then  
                call moveRight(tapeHead)            // Move tape head right 
            fi s2[pc] = RIGHT   
            if s2[pc] = LEFT then   
                uncall moveRight(tapeHead)          // Move tape head left
            fi s2[pc] = LEFT
        fi state = q2[pc] && s1[pc] = SLASH

        
    method moveRight(Cell tapeHead)
        local Cell right = nil
        call tapeHead::getRight(right)

        if right != nil then
            local Cell oldTapeHead = nil
            call right::getLeft(oldTapeHead)    // Retrieve copy to current head
            uncopy Cell oldTapeHead tapeHead    // uncompute reference to current head
            uncall right::getLeft(oldTapeHead)  // store copy to current head
            delocal Cell oldTapehead = nil
            tapeHead <=> right                  // Set right as new tape head
        else
            new Cell right
            local Cell tmp = nil
            copy Cell tapeHead tmp              // Copy current tape head
            uncall right::getLeft(tmp)          // Store left reference in new cell
            copy Cell right tmp                 // Copy reference to new right cell
            uncall right::getSelf(tmp)          // Store 'self' in new cell
            delocal Cell tmp = nil
            call moveRight(tapeHead)
        fi right != nil
        delocal Cell right = nil


